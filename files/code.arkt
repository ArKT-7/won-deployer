run_enable=true
global adb, exit_counter_needed, reset_android_data, selected_index, backup_path, exit_counter_needed, boot_android, normal  ##, root_device
logger.setLevel(logging.DEBUG)
with console.status("[cyan]Initializing adb", spinner="pong", spinner_style="white"):
    while True:
        try:
            adb = adbutils.AdbClient(host="127.0.0.1", port=5037)
            adb.make_connection()
        except adbutils.errors.AdbTimeout:
            with console.status("[cyan]Starting adb server"):
                try:
                    proc = subprocess.Popen("adb start-server",
                                            stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
                    stdout, stderr = proc.communicate()
                except FileNotFoundError:
                    console.log("Failed to start adb server")
                    console.log("Adb binary not found in path")
                    adb = None
                    sys.exit(169)
                else:
                    if proc.wait() != 0:
                        console.log("Failed to start adb server")
                        console.log(stdout)
                        adb = None
                        sys.exit(169)
        else:
            break
console.log("Initializing adb [bright_green]successful")
sleep_with_countdown(3)
exit_counter_needed = True

with console.status("[cyan]Checking device connection", spinner="smiley", spinner_style="white"):
    def get_device_serial(fb_list, adb_list):
        if len(fb_list) == 1 and len(adb_list) == 0:
            return fb_list[0]
        elif len(adb_list) == 1 and len(fb_list) == 0:
            return adb_list[0]
        elif len(adb_list + fb_list) == 0:
            return None
        else:
            console.log("More than one device detected. Use -d flag to set device")
            return None

    retry_count = 4
    delay = 10
    sleep(1)
    for attempt in range(retry_count):
        exit_counter_needed = True
        fb_list = fastboot.list_devices()
        adb_list = list(map(lambda x: x.serial, adb.list()))

        serial = get_device_serial(fb_list, adb_list)

        if serial:
            break

        if len(adb_list + fb_list) == 0:
            console.log("No devices available. Please check your device connection in bootloader Mode (Fastboot on screen)")
            if attempt < retry_count - 1:
                console.log(f"Retrying in {delay} seconds...")
                sleep(delay)
            else:
                sys.exit(170)

    if not serial:
        console.log("Failed to find device after multiple attempts")
        sys.exit(170)
if serial not in fb_list:
    exit_counter_needed = False
    console.log("ADB Device detected. need to be in bootloader Mode (Fastboot on screen)")
    reboot_to_bootloader(serial)
    with console.status("[cyan]Waiting for fastboot device", spinner="point", spinner_style="white"):
        try:
            fastboot.wait_for_bootloader(serial)
        except exceptions.DeviceNotFound:
            console.log("[red]Device timed out! Exiting")
            console.log("[bold yellow]please retry after reconnecting your device in bootloader Mode (Fastboot on screen)")
            sys.exit(172)

    console.log("Device connected")
else:
    console.log("Device connected")
sleep_with_countdown(3)
exit_counter_needed = False
try:
    with console.status("[cyan]Getting info from device", spinner="line", spinner_style="white"):
        if not fastboot.check_device(serial):
            console.log("Is it nabu?")
            console.log("please try again")
            fastboot.reboot(serial)
            sys.exit(254)  # Exit if reboot is initiated

        parts_status = fastboot.check_parts(serial)
        console.log("[bright_green]Device verified")
except exceptions.DeviceNotFound:
    console.log("[red]Device timed out! Exiting")
    console.log("[bold yellow]please retry after reconnecting your device in bootloader Mode (Fastboot on screen)")
    sys.exit(172)  # Exit if there's a timeout
except subprocess.CalledProcessError as e:
    console.log(f"Command failed with exit status {e.returncode}: {e.output}")
    sys.exit(1)  # Exit if there's a subprocess error

if Prompt.ask("\nDo you want to continue fix gpt for using 24H2 windows on your device? [bright_yellow]No(n) - Yes(y)", default="y", choices=["n", "y"]) == "n":
    # root_device = "y"
    console.log("[bold yellow]Ok then bye, Meet you again\n")
else:
    adbd = adb.device(serial)
    console.log("[bold yellow]starting fixing gpt process\n")
    console.log("Booting OrangeFox recovery")
    try:
        fastboot.boot_ofox(serial)
    except exceptions.UnauthorizedBootImage:
        console.log("Unable to start OrangeFox recovery")
        console.log("Reflash your ROM and try again")
        fastboot.reboot(serial)
        sys.exit(177)
    except subprocess.CalledProcessError as e:
        console.log("[red]Fastboot error. Please contact the developer")
        console.log("Executed command", e.cmd)
        sys.exit(179)
    
    with console.status("[cyan]Waiting for device", spinner="point", spinner_style="white"):
        exit_counter_needed = True
        try:
            adb.wait_for(serial, state="recovery")
        except adbutils.AdbTimeout:  # Ensure this matches the correct import and class
            console.log("[red]Device timed out! Exiting")
            console.log("[bold yellow]Please retry after reconnecting your device in bootloader Mode (Fastboot on screen)")
            sys.exit(173)
    
    exit_counter_needed = False
    console.log("[bright yellow]Running GPT fix script on the device...")

    for i in "a", "b", "c", "d", "e", "f":
        device = f"/dev/block/sd{i}"
        console.log(f"[bold yellow]\nFixing GPT on {device}...")
        commands = f"""
        echo "x\nj\nk\nw\nY" | gdisk {device}
        """
        try:
            output = adbd.shell(commands)
            logger.debug(f"Output for {device}:\n{output}")

            if "inaccessible" in output.lower() or "error" in output.lower():
                # Log the error before raising the exception
                logger.error("Fixing gpt error detected in output:\n%s", output)

                # Exit the spinner context before displaying error messages
                raise Exception("gpt fix error failed.")
        except Exception as e:
            console.log(f"[red]Error fixing GPT on {device}: {e}\n")
            sys.exit(1)
    print()
    console.log("[bright_green]\nGPT fixing process completed!")
    console.log("[bold yellow]\nRebooting your device\n")
    sleep(3)
    adbd.shell("reboot")
    sleep(5)
exit_counter_needed = False
